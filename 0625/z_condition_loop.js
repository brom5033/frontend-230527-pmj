// 조건문과 반복문의 베스트 Practice

// 1, 조건문

// 자주하는 실수

//? == 대신 ===를 사용하지 않는 것
// 자바스크립트에서 == 연산자는 두 값을 비교할때 타입변환을 수행 하지만 
// === 연산자는 타입 변환이 없이 엄격하게 비교한다
// 예상치 못할 결과를 피하기위해 === 연산자를 사용하는것이 더좋습니다

if (1== "1") {
  // true, 타입변환발생
}
if (1=== "1") {
  // false, 타입변환발생x
}



//?  조건문에서 불필요한 조건 사용
// if (x === true) 대신에 if (x)를 사용 할수있습니다.

if (isValid === true) {
  // ...Worst
}

if (isValid) {
  //...Best
}

// 부정 연산자 (!)사용

// if (x === false) 대신 if (!x)를 사용할수있습니다

// 1, 반복문

// 자주하는실수

//? 배열의 길이를 매 반복마다 계산하는것
// 배열의 길이는 루프 바깥에서 한번만 계산하는것이 효율적이다

// 비효율적인 방법
for (let index = 0; index < array.length; index++) {

}

// 효율적인 방법
let messase = array.length; // messase 부분은 마음대로 설정가능
for (let index = 0; index < array.length; index++) {

}

// 추가 설명

// 가능하면 map, reduce, filter와 같은 고차 함수를 사용하세요. 이러한 함수는 코드를 더 간결하고 가독성 있게 만듭니다

// 루프가 많은 양의 데이터를 처리해야하는 경우에는 웹 워커를 사용하여 메인 쓰레드가 차단되는것을 방지할수있습니다

// 무한 루프를 방지하기위해 반복문에 종료 조건을 명확하게 설정하세요

// 이러한 지침을 따르면 자바 스크립트의 조건문과 반복문을 더 효과적으로 사용할수있습니다 또한, 코드의 가독성과 유지보수성이 향상됩니다